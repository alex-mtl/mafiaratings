<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArrangedText" xml:space="preserve">
    <value>Night {0}</value>
  </data>
  <data name="Day" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="Don" xml:space="preserve">
    <value>don</value>
  </data>
  <data name="DonCheckText" xml:space="preserve">
    <value>Night {0}</value>
  </data>
  <data name="Dummy" xml:space="preserve">
    <value>[Dummy player]</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="ErrAnotherParty" xml:space="preserve">
    <value>Registration from another party.</value>
  </data>
  <data name="ErrBrokenLog" xml:space="preserve">
    <value>Broken log - game state can not go from {0} to {1}</value>
  </data>
  <data name="ErrDataVersion" xml:space="preserve">
    <value>Unsupported data version.</value>
  </data>
  <data name="ErrDbInit" xml:space="preserve">
    <value>Database is not initialized.</value>
  </data>
  <data name="ErrGameNotReady" xml:space="preserve">
    <value>The game is not ready to start.</value>
  </data>
  <data name="ErrGameStarted" xml:space="preserve">
    <value>Game is already started.</value>
  </data>
  <data name="ErrInvalidData" xml:space="preserve">
    <value>Invalid data format.</value>
  </data>
  <data name="ErrInvalidResponceCode" xml:space="preserve">
    <value>Invalid response code.</value>
  </data>
  <data name="ErrInvalidResponse" xml:space="preserve">
    <value>Invalid server response.</value>
  </data>
  <data name="ErrLoginRequiredForNewUser" xml:space="preserve">
    <value>Please login to create user.</value>
  </data>
  <data name="ErrLoginRequredForReg" xml:space="preserve">
    <value>Please login to make a registration.</value>
  </data>
  <data name="ErrNoConnection" xml:space="preserve">
    <value>No connection to the server.</value>
  </data>
  <data name="ErrNotConnected" xml:space="preserve">
    <value>Not connected to the server.</value>
  </data>
  <data name="ErrPlayerModerator" xml:space="preserve">
    <value>{0} is the moderator.</value>
  </data>
  <data name="ErrPlayerNum" xml:space="preserve">
    <value>Invalid player number.</value>
  </data>
  <data name="ErrUnsupportedLog" xml:space="preserve">
    <value>Unsupported game log version.</value>
  </data>
  <data name="ErrUserRegistered" xml:space="preserve">
    <value>{0} is already registered.</value>
  </data>
  <data name="KickedOut" xml:space="preserve">
    <value>kicked out</value>
  </data>
  <data name="KilledText" xml:space="preserve">
    <value>{0} {1} {2}</value>
  </data>
  <data name="Mafia" xml:space="preserve">
    <value>mafia</value>
  </data>
  <data name="Night" xml:space="preserve">
    <value>Night</value>
  </data>
  <data name="NoEvent" xml:space="preserve">
    <value>[No event]</value>
  </data>
  <data name="Russian" xml:space="preserve">
    <value>Russian</value>
  </data>
  <data name="Sheriff" xml:space="preserve">
    <value>sheriff</value>
  </data>
  <data name="SheriffCheckText" xml:space="preserve">
    <value>Night {0}</value>
  </data>
  <data name="Suicide" xml:space="preserve">
    <value>suicide</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="UnknownUser" xml:space="preserve">
    <value>[unknown]</value>
  </data>
  <data name="Warnings" xml:space="preserve">
    <value>warnings</value>
  </data>
  <data name="WarningsText" xml:space="preserve">
    <value>{0} warnings</value>
  </data>
  <data name="WarningText" xml:space="preserve">
    <value>1 warning</value>
  </data>
  <data name="NoClub" xml:space="preserve">
    <value>Unknown club</value>
  </data>
  <data name="DefRules" xml:space="preserve">
    <value>[default]</value>
  </data>
</root>